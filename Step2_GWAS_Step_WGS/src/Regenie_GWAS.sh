#!/bin/bash
# Regenie_Step2_GWAS_WGS 1.0.0
#
# App to run WGS single variants. 
# It's a single script to be run in 2 steps (to save multiple Regenie scripts across different apps)
# The conditional flag will say which step to run
#
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://documentation.dnanexus.com/developer for tutorials on how
# to modify this file.

main() {

    #### Make executables work (needs doing somewhere)
    chmod 777 *
     
    ##### Remove conditional input for now for ease
    conditional_step="No"
    type="Continuous"
    # set file locations etc.
    project="project-GbZ9g7QJVJzZVQj45j6xgxZ8"
    gwas_thresh=0.000000001 # 1e-9 # read this in
    log_gwas_thresh=`echo "-l(${gwas_thresh})/l(10)" | bc -l`
    run_number=1  # flag for 
    mac=1


    # download input files and get number of SNPs asked to condition on
    echo "downloading files to worker"
    download_files

    # Extract phenotype name
    Phenotype=$(awk 'NR == 1 {print $3}' Phenotype_TSV)
    echo ${Phenotype}
    #### Make output directory 
    echo "setting up files"
    setup_files

    # check if this run already exists and skip if so
    echo "checking if chunk (regenie and cojo) has already been run"
    check_chunk

    # if it's not already run then run the association analysis
    if [ ${already_run_regenie} == 0 ] && [ ${already_run_cojo} == 0 ]; then
      # create inclusion list
      echo "creating include list"
      create_include_list
      # run regenie
      echo "running regenie association testing"
      run_regenie
      echo "running cojo to identify novel independent associations"
      run_cojo
    #check if cojo ran
    elif [ ${already_run_regenie} == 1 ] && [ ${already_run_cojo} == 0 ]; then
      # create inclusion list
      echo "creating include list"
      create_include_list
      echo "running cojo to identify novel independent associations"
      run_cojo
    else
      echo "Nothing to run for this chunk-phenotype combination"
    fi

    #### Nonsense output 
    dx-jobutil-add-output output "$output" --class=string
}

download_files() {
  ## download input files
  dx download "$Covariate_TSV" -o Covariate_TSV.gz
  dx download "$Phenotype_TSV" -o Phenotype_TSV.gz

  #### Unzip Pheno and Covar Files
  gunzip Covariate_TSV.gz
  gunzip Phenotype_TSV.gz

  # Download WGS data
  dx download ${project}":/proteomics/pgens/chr${chr}_*"
  # deal with conditional list
  touch conditional_list
  
    
  grep "chr${chr}:" conditional_list | cat > conditional_list_local

  echo "conditional" >> conditional_list_local

  n_conditional_snps=`wc -l conditional_list_local | cut -d' ' -f1`
  n_conditional_snps=$((${n_conditional_snps}-1))

  grep -wv "conditional" conditional_list_local | cat > conditional_list_local_mv
  mv conditional_list_local_mv conditional_list_local


}

setup_files() {
  # make output directory and download step 1 files ready for running
  if [ $type == "Continuous" ];then
    if [ "${invnorm}" == "RINT" ]; then
      	outputdir=${Phenotype}_rint_burden_wgs/single_variants
    elif [ "${invnorm}" == "MCC" ]; then
	outputdir=${Phenotype}_mcc_burden_wgs/single_variants
    else 
      	outputdir=${Phenotype}_raw_burden_wgs/single_variants
    fi		
  else
    outputdir=${Phenotype}_binary_burden_wgs/single_variants
  fi
  mkdir -p $outputdir
  dx mkdir -p ${project}:proteomics/results/${outputdir}
  # download step 1 file
  dx download ${project}:/proteomics/results/step1/${Phenotype}_Step1* --overwrite
  #mv ${Phenotype}_${type}_${RINT}_Step1_1.loco ${Phenotype}_Step1_1.loco
  mv ${Phenotype}_Step1.list ${Phenotype}_Step1_pred.list
}


check_chunk() {
  # check if the regenie files for this chunk already exist and skip if so
  touch ${Phenotype}_chr${chr}_${chrom_start}_${chrom_end}_singlevar_run_XYZ_${Phenotype}.regenie # create a temporary file to bypass dx's ridiculous erroring
  dx upload ${Phenotype}_chr${chr}_${chrom_start}_${chrom_end}_singlevar_run_XYZ_${Phenotype}.regenie --path=${project}:proteomics/results/${outputdir}/
  files=`dx ls ${project}:proteomics/results/${outputdir}/${Phenotype}_chr${chr}_${chrom_start}_${chrom_end}_singlevar_run_*_${Phenotype}.regenie` # check which files exist
  dx rm -a  ${project}:proteomics/results/${outputdir}/${Phenotype}_chr${chr}_${chrom_start}_${chrom_end}_singlevar_run_XYZ_${Phenotype}.regenie
  already_run_regenie=0 # flag to check if this chunk has already run, and skip if so (this will enable the pipeline to be resubmitted if it fails part way through)
  for file in $files # check if this chunk's output file exists
  do
    if [[ $file == ${Phenotype}_chr${chr}_${chrom_start}_${chrom_end}_singlevar_run_${run_number}_${Phenotype}.regenie ]]
    then
      already_run_regenie=1
      dx download ${project}:proteomics/results/${outputdir}/${Phenotype}_chr${chr}_${chrom_start}_${chrom_end}_singlevar_run_${run_number}_${Phenotype}.regenie --overwrite
      mv ${Phenotype}_chr${chr}_${chrom_start}_${chrom_end}_singlevar_run_${run_number}_${Phenotype}.regenie ./${outputdir}/
    fi
  done

  ###check if cojo ran
  touch ${Phenotype}_chr${chr}_${chrom_start}_${chrom_end}_conditioned_cojo_mac5_v4_TEMP_FILE.log # create a temporary file to bypass dx's ridiculous erroring
  dx upload ${Phenotype}_chr${chr}_${chrom_start}_${chrom_end}_conditioned_cojo_mac5_v4_TEMP_FILE.log --path=${project}:proteomics/results/${outputdir}/
  files=`dx ls ${project}:proteomics/results/${outputdir}/${Phenotype}_chr${chr}_*_conditioned_cojo_mac5_v4*.log` # check which files exist
  dx rm -a ${project}:proteomics/results/${outputdir}/${Phenotype}_chr${chr}_${chrom_start}_${chrom_end}_conditioned_cojo_mac5_v4_TEMP_FILE.log
  already_run_cojo=0 # flag to check if this chunk has already run, and skip if so (this will enable the pipeline to be resubmitted if it fails part way through)
  for file in $files # check if this chunk's output file exists
  do
    if [[ $file == ${Phenotype}_chr${chr}_${chrom_start}_${chrom_end}_conditioned_cojo_mac5_v4.log ]]
    then
      already_run_cojo=1
    fi
  done
}

run_regenie() {
  # run regenie
  if [ $conditional_step == "No" ];then   
    output_prefix=${Phenotype}_chr${chr}_${chrom_start}_${chrom_end}_singlevar_run_${run_number}
  else
    output_prefix=${Phenotype}_chr${chr}_singlevar_run_${run_number}
  fi
  
  if [ $type == "Continuous" ]
  then
    bash run_step2_gwas_wgs.sh ${Phenotype} ${catvars} ${outputdir} ${chr} ${invnorm} ${n_conditional_snps} ${output_prefix} ${mac} No No
  else
    bash run_step2_gwas_wgs.sh ${Phenotype} ${catvars} ${outputdir} ${chr} ${invnorm} ${n_conditional_snps} ${output_prefix} ${mac} Yes Yes
  fi
  cp conditional_list_local ${outputdir}/${output_prefix}_${Phenotype}.conditional_list

  dx upload ${outputdir}/*run_${run_number}* --path ${project}:proteomics/results/${outputdir}/
}

create_include_list() {
  # create include list for regenie
    # generate list of variants to test based on position
    echo "downloading lead SNPs"
    awk -v start_pos=${chrom_start} -v end_pos=${chrom_end} -v chr=${chr} '$1==chr && $2>=start_pos && $2<=end_pos{print $3}' chr${chr}_sv_and_snv.pvar | cat  >> tmp_inclusion_list_temporary
    cat conditional_list_local tmp_inclusion_list_temporary > inclusion_list_final

    awk '{print $1,$2}' Covariate_TSV > individs_keep

    ./plink2 --pfile chr${chr}_sv_and_snv --pheno Phenotype_TSV --prune --keep individs_keep --extract inclusion_list_final --mac ${mac} --make-bed  --out chr${chr}_for_regenie
}


run_cojo() {
  #awk -v start=${chrom_start} -v end=${chrom_end} 'NR==1 || ((2*$6*$7>=5) && ($7>=10000)) {print}' ${outputdir}/*.regenie > regenie_output_for_cojo

  #SNP A1 A2 freq b se p N 
  #CHROM GENPOS ID ALLELE0 ALLELE1 A1FREQ N TEST BETA SE CHISQ LOG10P EXTRA

  awk '$7>=10000 && (2*$6*$7>4.95) {print $3,$5,$4,$6,$9,$10,10**-$12,$7}'  ${outputdir}/${Phenotype}_chr*_run_1_${Phenotype}.regenie > input_gcta
  
  if [ "$chr" = "X" ]; then
	chr2=23
        awk '{print "23",$2,$3,$4,$5,$6}' chr${chr}_for_regenie.bim > chr${chr}_for_regenie_mv
        mv chr${chr}_for_regenie_mv chr${chr}_for_regenie.bim
   else
	chr2=${chr}
   fi

  ./gcta-1.94.1 --bfile chr${chr}_for_regenie --chr ${chr2} --diff-freq 0.2 --maf 0 --cojo-slct --cojo-file input_gcta --cojo-p 2.95e-10 --out $outputdir/${Phenotype}_chr${chr}_${chrom_start}_${chrom_end}_conditioned_cojo_mac5_v4
  dx upload ${outputdir}/${Phenotype}_chr${chr}_${chrom_start}_${chrom_end}_conditioned_cojo_mac5* --path ${project}:proteomics/results/${outputdir}/


}
